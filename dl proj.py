# -*- coding: utf-8 -*-
"""CS20B1023 KALAIPOWMIKA DL PROJECT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ihw1iuAB9jOa1m3fbZR25D-IPW3Cj9V8
"""

import cv2
import os
import numpy as np
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

# Function to preprocess images
def preprocess_image(image, target_size=(224, 224)):
    image = cv2.resize(image, target_size)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    return image

# Load and preprocess data for normal vs. abnormal classification
def load_and_prepare_data_for_normal_abnormal_classification(data_dir):
    x_data = []
    y_labels = []

    for class_name in os.listdir(data_dir):
        class_dir = os.path.join(data_dir, class_name)
        if class_name == "Normal":
            label = 0  # Label 0 for Normal
        else:
            label = 1  # Label 1 for Abnormal

        for image_file in os.listdir(class_dir):
            image_path = os.path.join(class_dir, image_file)
            image = cv2.imread(image_path)
            image = preprocess_image(image)
            x_data.append(image)
            y_labels.append(label)

    x_data = np.array(x_data)
    y_labels = np.array(y_labels)

    return x_data, y_labels

# Load and preprocess data for COVID vs. Pneumonia classification
def load_and_prepare_data_for_covid_pneumonia_classification(data_dir):
    x_data = []
    y_labels = []

    for class_name in os.listdir(data_dir):
        class_dir = os.path.join(data_dir, class_name)
        if class_name == "Covid":
            label = 0  # Label 0 for COVID
        else:
            label = 1  # Label 1 for Pneumonia

        for image_file in os.listdir(class_dir):
            image_path = os.path.join(class_dir, image_file)
            image = cv2.imread(image_path)
            image = preprocess_image(image)
            x_data.append(image)
            y_labels.append(label)

    x_data = np.array(x_data)
    y_labels = np.array(y_labels)

    return x_data, y_labels

# Load and prepare data for normal vs. abnormal classification
train_data_dir = "/content/drive/MyDrive/Covid19-dataset/train"
x_train_normal_abnormal, y_train_normal_abnormal = load_and_prepare_data_for_normal_abnormal_classification(train_data_dir)
x_test_normal_abnormal, y_test_normal_abnormal = load_and_prepare_data_for_normal_abnormal_classification(test_data_dir)

# Split the data
x_train1, x_test1, y_train1, y_test1 = train_test_split(x_train_normal_abnormal, y_train_normal_abnormal, stratify=y_train_normal_abnormal, random_state=5, test_size=0.2)

# Convert labels to one-hot encoding
y_train1 = tf.keras.utils.to_categorical(y_train1, num_classes=2)
y_test1 = tf.keras.utils.to_categorical(y_test1, num_classes=2)

# Create a CNN model for normal vs. abnormal classification
model1 = keras.Sequential([
    layers.Conv2D(16, (3, 3), activation='relu', input_shape=(224, 224, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(32, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(2, activation='softmax')
])

# Define learning rate and optimizer
learning_rate = 0.001
optimizer = keras.optimizers.Adam(learning_rate=learning_rate)

# Compile the model
model1.compile(optimizer, loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model1.fit(x_train1, y_train1, validation_data=(x_test1, y_test1), epochs=10, batch_size=32)

# Load and prepare data for COVID vs. Pneumonia classification
x_train2, y_train2 = load_and_prepare_data_for_covid_pneumonia_classification(train_data_dir)
x_test2, y_test2 = load_and_prepare_data_for_covid_pneumonia_classification(test_data_dir)

# Split the data
x_train2, x_test2, y_train2, y_test2 = train_test_split(x_train2, y_train2, stratify=y_train2, random_state=5, test_size=0.2)

# Convert labels to one-hot encoding
y_train2 = tf.keras.utils.to_categorical(y_train2, num_classes=2)
y_test2 = tf.keras.utils.to_categorical(y_test2, num_classes=2)

# Create a CNN model for COVID vs. Pneumonia classification
model2 = keras.Sequential([
    layers.Conv2D(16, (3, 3), activation='relu', input_shape=(224, 224, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(32, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(2, activation='softmax')
])


# Define the desired learning rate
learning_rate = 0.01

# Create an optimizer with the desired learning rate
optimizer = tf.keras.optimizers.legacy.Adam(learning_rate=learning_rate)

# Compile the model and specify the optimizer
model2.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])

# Train model2 for COVID vs. Pneumonia classification
model2.fit(x_train2, y_train2, validation_data=(x_test2, y_test2), epochs=10, batch_size=32)

from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score

# Predictions for model1
y_pred1 = model1.predict(x_test_normal_abnormal)
y_pred1_class = np.argmax(y_pred1, axis=1)

# Predictions for model2
y_pred2 = model2.predict(x_test2)
y_pred2_class = np.argmax(y_pred2, axis=1)

# Classification report and confusion matrix for model1
report1 = classification_report(y_test_normal_abnormal, y_pred1_class, target_names=['Normal', 'Abnormal'])
cm1 = confusion_matrix(y_test_normal_abnormal, y_pred1_class)

from sklearn.metrics import classification_report, confusion_matrix

# Predictions for model2
y_pred2 = model2.predict(x_test2)
y_pred2_class = np.argmax(y_pred2, axis=1)

# Classification report for model2
report2 = classification_report(np.argmax(y_test2, axis=1), y_pred2_class, target_names=['COVID', 'Pneumonia'])

# Confusion matrix for model2
cm2 = confusion_matrix(np.argmax(y_test2, axis=1), y_pred2_class)

# Calculate AUROC for model2
auroc = roc_auc_score(y_test2[:, 0], y_pred2[:, 0])

# Print results
print("Model 1 - Normal vs. Abnormal:")
print(report1)
print("Confusion Matrix:")
print(cm1)

print("\nModel 2 - COVID vs. Pneumonia:")
print(report2)
print("Confusion Matrix:")
print(cm2)

print("\nAUROC for COVID vs. Pneumonia:")
print(auroc)